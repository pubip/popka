//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Uslygi.Databases
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TurkishEntities : DbContext
    {
        public TurkishEntities()
            : base("name=TurkishEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Availability> Availability { get; set; }
        public virtual DbSet<booking> booking { get; set; }
        public virtual DbSet<BookingAndTour> BookingAndTour { get; set; }
        public virtual DbSet<check> check { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Dogovor> Dogovor { get; set; }
        public virtual DbSet<Hotel> Hotel { get; set; }
        public virtual DbSet<Pass> Pass { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TourAgency> TourAgency { get; set; }
        public virtual DbSet<TourForSales> TourForSales { get; set; }
        public virtual DbSet<TypeTour> TypeTour { get; set; }
        public virtual DbSet<VidClient> VidClient { get; set; }
        public virtual DbSet<VidTour> VidTour { get; set; }
        public virtual DbSet<Worker> Worker { get; set; }
        public virtual DbSet<Zag> Zag { get; set; }
        public virtual DbSet<TourInfo> TourInfo { get; set; }
    
        public virtual int AddCheck(Nullable<int> clientid, Nullable<int> workerid, Nullable<int> tourid)
        {
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var workeridParameter = workerid.HasValue ?
                new ObjectParameter("workerid", workerid) :
                new ObjectParameter("workerid", typeof(int));
    
            var touridParameter = tourid.HasValue ?
                new ObjectParameter("tourid", tourid) :
                new ObjectParameter("tourid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCheck", clientidParameter, workeridParameter, touridParameter);
        }
    
        public virtual int AddClient(string secondname, string location, string name, string middlename, Nullable<int> idvid, Nullable<int> passportid, Nullable<int> zagid, string email)
        {
            var secondnameParameter = secondname != null ?
                new ObjectParameter("secondname", secondname) :
                new ObjectParameter("secondname", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var idvidParameter = idvid.HasValue ?
                new ObjectParameter("idvid", idvid) :
                new ObjectParameter("idvid", typeof(int));
    
            var passportidParameter = passportid.HasValue ?
                new ObjectParameter("passportid", passportid) :
                new ObjectParameter("passportid", typeof(int));
    
            var zagidParameter = zagid.HasValue ?
                new ObjectParameter("zagid", zagid) :
                new ObjectParameter("zagid", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClient", secondnameParameter, locationParameter, nameParameter, middlenameParameter, idvidParameter, passportidParameter, zagidParameter, emailParameter);
        }
    
        public virtual int AddPass(Nullable<int> id, string location, Nullable<System.DateTime> birth)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("birth", birth) :
                new ObjectParameter("birth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPass", idParameter, locationParameter, birthParameter);
        }
    
        public virtual int AddZag(Nullable<int> id, string location, Nullable<System.DateTime> birth, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("birth", birth) :
                new ObjectParameter("birth", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddZag", idParameter, locationParameter, birthParameter, startdateParameter, enddateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddTour(string nametour, string description, Nullable<int> countpeople, Nullable<int> countnights, string typeclient, Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend, Nullable<int> countryid, Nullable<int> cityid, Nullable<int> hotelid, Nullable<int> typeid, Nullable<int> vidid, Nullable<int> avaliabilityid, Nullable<int> countprice)
        {
            var nametourParameter = nametour != null ?
                new ObjectParameter("nametour", nametour) :
                new ObjectParameter("nametour", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var countpeopleParameter = countpeople.HasValue ?
                new ObjectParameter("countpeople", countpeople) :
                new ObjectParameter("countpeople", typeof(int));
    
            var countnightsParameter = countnights.HasValue ?
                new ObjectParameter("countnights", countnights) :
                new ObjectParameter("countnights", typeof(int));
    
            var typeclientParameter = typeclient != null ?
                new ObjectParameter("typeclient", typeclient) :
                new ObjectParameter("typeclient", typeof(string));
    
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(int));
    
            var cityidParameter = cityid.HasValue ?
                new ObjectParameter("cityid", cityid) :
                new ObjectParameter("cityid", typeof(int));
    
            var hotelidParameter = hotelid.HasValue ?
                new ObjectParameter("hotelid", hotelid) :
                new ObjectParameter("hotelid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var vididParameter = vidid.HasValue ?
                new ObjectParameter("vidid", vidid) :
                new ObjectParameter("vidid", typeof(int));
    
            var avaliabilityidParameter = avaliabilityid.HasValue ?
                new ObjectParameter("avaliabilityid", avaliabilityid) :
                new ObjectParameter("avaliabilityid", typeof(int));
    
            var countpriceParameter = countprice.HasValue ?
                new ObjectParameter("countprice", countprice) :
                new ObjectParameter("countprice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTour", nametourParameter, descriptionParameter, countpeopleParameter, countnightsParameter, typeclientParameter, datestartParameter, dateendParameter, countryidParameter, cityidParameter, hotelidParameter, typeidParameter, vididParameter, avaliabilityidParameter, countpriceParameter);
        }
    
        public virtual int AddCity(string name, string desc)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCity", nameParameter, descParameter);
        }
    
        public virtual int AddCountry(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCountry", nameParameter);
        }
    
        public virtual int DeleteTour(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTour", idParameter);
        }
    }
}
